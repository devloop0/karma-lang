import -> lang
import -> core_types -> ct

var -> b = lang.b

module -> internal_helper_functions {
	func immut -> single_digit_integer_to_string(var -> a) {
		match -> a {
			1 -> {
				return '1'
			}
			2 -> {
				return '2'
			}
			3 -> {
				return '3'
			}
			4 -> {
				return '4'
			}
			5 -> {
				return '5'
			}
			6 -> {
				return '6'
			}
			7 -> {
				return '7'
			}
			8 -> {
				return '8'
			}
			9 -> {
				return '9'
			}
			0 -> {
				return '0'
			}
			-> {
				exit(1, 'Expected a single digit integer to convert into a string.')
			}
		}
	}
}

func immut -> to_string(var -> a) {
	if [a] == ct.string_type {
		return a
	} -> [a] == [lang.string('')] {
		return a.string
	}
	if [a] != ct.integer_type && [a] != [lang.int(0)] {
		exit(1, 'The only type that can be converted to a string as of now is an integer')
	}
	var -> temp = 0
	if [a] == [lang.int(0)] {
		temp = a.int
	}
	var -> ret = ''
	while +b(a) {
		var -> mod = a % 10
		ret = insert(ret, 0, internal_helper_functions.single_digit_integer_to_string(mod))
		a /= 10
	}
	return ret
}

func immut -> sum(var -> a) {
	if [a] != ct.list_type && [a] != ct.tuple_type {
		return nil
	}
	var -> sum = 0
	for var -> temp : a {
		sum += temp
	}
	return sum
}